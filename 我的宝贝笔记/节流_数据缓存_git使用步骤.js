// 节流
// 节流作用: 一个可以连续触发的事件, 我们可以通过节流的方式, 降低事件内代码的执行频率
// ①声明一个变量, 开关
let flag = true;
// ②创建一个持续触发的事件
document.onmousemove = function () {
    // ③判断阀门是否打开
    if (flag == true) {
        // ④TODO... 要执行的代码


        // ⑤关阀门
        flag = false
        // ⑥开定时器
        setTimeout(() => {
            flag = true;
        }, 200)
    }
}

// 数据缓存
// 使用场景: 搜索框  好处: 减轻服务器压力, 减少不必要的重复请求
// ①声明一个对象保存搜索框搜索过的内容及后端返回的数据
const o = {}
// ②咱们声明一个变量, 保存用户在输入框输入的内容. 这个是作为o对象的Key使用
let k = input.value.trim();
// ③咱们获取到用户输入相应的内容之后,从后台返回的数据
let res = ajax或取的数据
// ④添加到o对象中
o[k] = res;
// ⑤用户在输入内容之前, 咱们判断o对象中有没有用户输入过的查询字段 keywords
if (o[keywords]) {
    // ⑥如果对象保存了用户之前输入过的内容, 咱们直接拿输入过的内容渲染页面
    render(o[keywords])
} else {
    // ⑦直接发起ajax,获取用户输入字段对应的后端数据
    res = ajax获取后端数据
    render(res)
}

// http状态
/**
 * 2**  200 数据请求成功
 * 3**  304 数据并不是从服务器获取的,而是用浏览器缓存的数据. 硬性重新刷新页面,让浏览器从服务器拿数据
 * 4**  404 客户端访问的路径在服务器并不存在(ajax请求地址写错了)
 * 5**  500 服务器内部数据处理出错
 */

// git简单操作  不是新电脑, 不需要走2-3步 --- 刚进公司,用的是自己的电脑  走1,4,5,6步骤 --- 正常开发走 第7步 --- 刚入公司,新电脑,走1-6步
// 用得最多的: ①去公司干活(新人), 项目经理会给你一个项目的git地址
//            ②新电脑, 安装git, 配置git的用户名,邮箱
//            配置用户名: git config --global user.name "自己用户名"
//            配置用邮箱: git config --global user.email "自己邮箱名"
//            ③配置ssh秘钥  看xmind有  如果你是用gitee自己学习时候的账号进行公司项目管理,不需要重新配置秘钥. 如果你新创建了一个gitee账号,需要重新配置秘钥
//            ④拉代码   git clone git地址
//            ⑤项目经理会告诉你在哪个分支进行开发, 切换(创建)分支    第五步是创建分支(取分支名)
//            ⑥让本地仓库和远程建立链接  git push -u orgin "分支名"   分支名填第五步开发的分支名
//            ⑦正常写代码: git add .    git commit -m ""   git push
//            注意:在走第七步之前, 需要git pull一下, 让远程仓库的代码同步到本地